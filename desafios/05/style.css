* {
  box-sizing: border-box;
  margin: 0;
  padding: 0;
}

html,
body {
  height: 100vh;
}

body {
  background-color: #7159c1;
  font-family: Roboto, Arial, sans-serif;
}

section {
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
}

h1 {
  font-size: 32px;
  letter-spacing: 1px;
  margin: 20px 0;
  color: white;
}

form {
  margin: 20px 0;
  background-color: white;
  padding: 30px 25px;
  border-radius: 5px;
}

form .input-block {
  margin-bottom: 20px;
}

form .input-block label {
  font-size: 14px;
  color: darkslateblue;
}

form .input-block input {
  width: 100%;
  display: block;
  margin-top: 8px;
  padding: 7px;
  font-size: 16px;
  color: #7159c1;
  border-radius: 2px;
  border: 1px solid #ccddef;
  outline-color: #7159c1;
}

form .btn-login {
  display: block;
  min-width: 120px;
  border: none;
  background-color: #7159c1;
  color: white;
  border-radius: 25px;
  margin: auto;
  padding: 7px;
}

/* APARIÇÃO DO FORM */

form {
  overflow: hidden;
  animation: fade 0.3s;
}

form .input-block:nth-child(1) {
  animation-name: move;
  animation-duration: 400ms;
}

form .input-block:nth-child(2) {
  animation-name: move;
  animation-duration: 400ms;
  animation-delay: 100ms;
  animation-fill-mode: backwards; /* (animation-fill-mode) será aplicado quando não estiver ocorrendo animações. (backwards: faz ele ficar na posição inicial da animação "from")*/
}

form .btn-login {
  animation: move 400ms;
  animation-delay: 250ms;
  animation-fill-mode: backwards;
}

@keyframes move {
  from {
    opacity: 0;
    transform: translateX(-35%) /*movimento no eixo X.*/
  }
  to {
    opacity: 1;
    transform: scale(1);
    transform: translateX(0%)
  }
}

@keyframes fade {
  from {
    opacity: 0;
    transform: scale(0.9);
  }
  to {
    opacity: 1;
    transform: scale(1);
  }
}

/* Quando clicar no botão, sumir com o form. */

.form-hide {
  animation: down 1.2s;
  animation-fill-mode: forwards; /*com "forwards, ele se manterá na forma final após a animação, ou seja, oposto ao "backwards"."*/
  animation-timing-function: cubic-bezier(0.075, 0.82, 0.165, 1);
  /* animation-timing-function: steps(2); em quantos "passos" será feita a animação. */
  /* animation-timing-function: cubic-bezier(0, 1.2, 0.2, 0.2); curva de tempo de duração da animação, baseado no eixo X e Y. São aplicado com "ease-in", "ease-ou", etc. */
}

@keyframes down {
  from {
    transform: translateY(0); /*movimento do elemento no eixo Y. obs: 0 é a posição inicial, tanto em X, como em Y*/ 
  }
  to {
    transform: translateY(100vh);
  }
}